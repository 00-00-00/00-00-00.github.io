<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on 00-00-00</title>
    <link>https://00-00-00.github.io/tags/android/</link>
    <description>Recent content in Android on 00-00-00</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Jun 2018 21:22:02 +0530</lastBuildDate>
    
	<atom:link href="https://00-00-00.github.io/tags/android/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Android Architecture Sandbox #2</title>
      <link>https://00-00-00.github.io/posts/android-arch-part2/</link>
      <pubDate>Tue, 26 Jun 2018 21:22:02 +0530</pubDate>
      
      <guid>https://00-00-00.github.io/posts/android-arch-part2/</guid>
      <description>The objective is to write an android application that will fetch some data over the network, store it locally and display the data in a list-detail format.
Since we want to try avoiding couping. We will try adopting the Observer Patter i.e. we&amp;rsquo;ll have modules that emit events and other modules react to to the event. We can use RxJava for a publish-subscribe mechanism. Since we are using RxJava on Android, RxAndroid which provides us nifty Schedulers for managing the threads.</description>
    </item>
    
    <item>
      <title>Android Architecture Sandbox #1</title>
      <link>https://00-00-00.github.io/posts/android-arch-part1/</link>
      <pubDate>Mon, 25 Jun 2018 11:14:44 +0530</pubDate>
      
      <guid>https://00-00-00.github.io/posts/android-arch-part1/</guid>
      <description>Around May of last year Android introduced a bunch of new classes around organising code better. Till then Android team never really took a stand to tell the community how to organise their codebases. What I observed was activities started developing unwieldy View classes (Activities and Fragments) that did everything from spawning new threads, making network calls, performing disk writes to anything and everything you could require the application to do.</description>
    </item>
    
  </channel>
</rss>